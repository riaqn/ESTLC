#+title: Design of ESTLC
* Types
  There 're only two ways to define new types in our type system: sum type and product
  type; all types 're defined by consturction of these two. While one
  may argue that primitive types like =int= must be built-in, I will
  show in following sections that =int=, as well as other primitive
  types, is /definable/ in our language.
** Product Types
   Takes the type =Person= as example, a person has a name and an age.
   We thus have
   #+begin_example
     Person = person string int
   #+end_example
   Note that in addition to =Person=, we also defined a /constructor/
   =person=, which has type =string -> int -> Person=. We now can
   create a new =Person= in this way:
   #+begin_example
   person "Tom" 18
   #+end_example
   to represent a person, whose name is "Tom" and is 18 years old.

   One can also define a product type with no field, as follows
   #+begin_example
   Void = void
   #+end_example
   the constructor =void= is of type =Void=. As it does not take any
   argument, you can treat it as a "constant" of type =Void=. 
   What's the purpose of this? Read on.
** Sum Types
   A *thing* can be either a person or an animal.
   #+begin_example
     Animal = animal bool // can it fly?
     Thing = person_thing Person | animal_thing Animal
   #+end_example
   What 's the types of =person_thing= and =animal_thing=? Well, they
   're just functions to convert =Person= (=Animal=) to =Thing=; so
   =person_thing= has type =Person->Thing= and so is =animal_thing=.
   
** Defining Primitive Types
   After familiar with product types and sum types, now we can define
   primitive types like =int=. 
   #+begin_example
     Zero = zero
     One = one
     Two = two
     ...

     Int = zero_int Zero | one_int One | two_int Two | ...
   #+end_example
   =zero= is of type =Zero= (back to section 'Sum Type' if you can't
   follow), and =zero_int= is of type =Zero->Int=. By writing =zero=
   you 're actually refering to a constant of type =Zero= and you must
   write =zero_int zero= to represent an =Int=.
  
* Deproduct and Desum
  Ok, now I get a =Person= in my function, how can I refer to the age
  of that person? 

  We introduce an operation /Deproduct/, which serves for a contrary
  purpose as the =Person_cons=; that is, instead of zipping a =String=
  and a =Int= into a =Person=, we extract a =String= and a =Int= from a =Person=. 

  Say the variable representing the person is =p=, we can write code
  as follows:
  #+begin_example
    (deproduct p (name age)
               ("hello " + name))
  #+end_example
  =deproduct= on the same layer of =lambda= or =application=; it's not
  a function, but a low-level operator.

  For a similar purpose, here is the =desum= (assuming we have a
  =Thing= named =t=):
  #+begin_example
      (desum t 
      (deproduct t (name age) ("you are a person named " + name))
      (deproduct t (canfly) (desum canfly (t "you animal can fly")
                                          (f "you animal cannot fly"))))
  #+end_example
  /Need explaination here/
* Typing Rules
  If the following symbols seem strange to you, please refer to
  [[https://en.wikipedia.org/wiki/Simply_typed_lambda_calculus#Typeing_rules][Wikipedia]].
  There 're several operators in our language: abstraction(\lambda),
  application, deproduct(\mu), desum(\nu). 
  \begin{align*}
  {{\Gamma, x : \sigma \vdash e : \tau} \over {\Gamma \vdash (\lambda x:\sigma . e) : (\sigma \to \tau)}} \tag{Abs} \\ \\
  {{\Gamma \vdash e_1:\sigma \to \tau \quad \Gamma \vdash e_2:\sigma} \over {\Gamma \vdash e_1 e_2 : \tau}} \tag{App} \\ \\ 
  {{\Gamma \vdash p : \sigma_1 \times \sigma_2 \quad \Gamma, x : \sigma_1, y : \sigma_2 \vdash e : \tau} \over 
  {\mu p(x, y) . e : \sigma_1 \times \sigma_2 \to \tau}} \tag{Deproduct} \\ \\
  {{\Gamma \vdash s : \sigma_1 + \sigma_2 \quad \Gamma, s : \sigma_1 \vdash e_1:\tau \quad \Gamma,s : \sigma_2 \vdash e_2:\tau} \over
  {\nu s . e_1, e_2 : \sigma_1 + \sigma_2 \to \tau}} \tag{Desum} \\ \\
  \end{align*}

  
